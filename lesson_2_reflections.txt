in order to initialize a repository:
git init (in the directory where we want to control version)

with git init git do not commit anything, because if so what would be the msg
added for the commitment? Also perhaps the user do not want to add all the
files to the commit.  For this if we do:

git log
will give the following result:
fatal: bad default revision 'HEAD'
That indicates that there is nil comits 

git status gives the status of the files that are in the repository, and the 
status on whether the tracked or not.

Q: What happens when you initialize a repository? Why do you need to do it?

git creates a folder where it will store all the relevant metadata to track
different versions of the repository.  If not done, where that information would
be stored, and how would git know what we want to control version?

Q: How is the staging area different from the working directory and the 
repository? What value do you think it offers?

The staging area is a buffer area that allows granularity on the files of my
working directory that I want to version control.  It is different from the
working directory in the sense that I can commit only a number of files in one
of my commits, and for that the staging area allows me to add the relevant number
of files and then make that commit.

Q: How can you use the staging area to make sure you have one commit per 
logical change?

Every time that I made a change in a file that works I can use add git to 
move the file to the staging area, but from there the only logical move is to
commit it? Ahhhh... Every time I make a logical change, I add the file to the
staging area.  Now, every time I want to add another change, before doing it I 
commit that change, and add the next logical change to the staging area, is that
the way?

Q: What are some situations when branches would be helpful in keeping your 
history organized? How would branches help?

In experimental mode, branches can be something very interesting to check whether
some new feature can be added, add a new version in different language, or with
a different logic, etc.

Q: How do the diagrams help you visualize the branch structure?

Diagrams help to understand the historic of comits and different branches, and
therefore we can go in time to the different stages of the projects and explore
different features, experiment with things, add or remove components, change
behaviours, etc.  All very comprehensive!

Q: What is the result of merging two branches together? Why do we represent it 
in the diagram the way we do?

It is the result of keeping the changes that we want to maintain in different
branches, so that´s why there is a single point "merging" both branches. It seems
to get the best features of both worlds.  Too good to be true!

Q: What are the pros and cons of Git’s automatic merging vs. always doing merges
manually?

Git automatic merging can have issues that are not simple for a computer to 
resolve, so a manual merge can resolve ambiguities.  On the other side, all manual
merges can be very time consuming and prone to errors




